# Проектирование отказоустойчивой системы управления концертами

> Домашнее задание: «Проектирование системы хранения данных и повышения производительности с использованием БД, кэша и CDN»

# Проектирование отказоустойчивой системы управления концертами

## Архитектура с использованием реляционной БД, кэша и CDN

### 1. Цель и контекст

Система предназначена для управления концертами и продажи билетов. Она должна обеспечивать:

* высокую производительность при больших нагрузках (в периоды старта продаж);
* отказоустойчивость и масштабируемость;
* быструю доставку статического контента пользователям по всему миру.

---

### 2. Общая архитектура

На диаграмме представлена микросервисная архитектура:

* **Client** — веб или мобильное приложение.
* **CDN** — кэширует статические ресурсы (изображения, JS, CSS, афиши).
* **API Gateway (KONG)** — единая точка входа, выполняет маршрутизацию, аутентификацию, rate limiting и мониторинг.
* **Микросервисы:**

  * `UserService` — регистрация, аутентификация, профили пользователей.
  * `ConcertService` — управление концертами, артистами и площадками.
  * `OrderService` — оформление заказов, бронирование мест.
  * `EventsService` — расписание событий и аналитика.
  * `PaymentService` — взаимодействие с платёжными шлюзами.
* **PostgreSQL** — каждая служба имеет собственную базу данных (*Database per Service*), что обеспечивает изоляцию данных и независимое масштабирование.
* **Redis Cluster** — общий кэш, используемый всеми микросервисами для хранения сессий, rate-лимитов и популярных данных.

---

### 3. Проектирование базы данных

#### 3.1 Реляционные БД (PostgreSQL)

Используются для:

* хранения транзакционных данных (покупки, платежи, бронирования мест);
* управления пользователями, событиями, концертами;
* обеспечения ACID-транзакций.

Примеры таблиц:

* `users`, `roles` — в **UserService**;
* `concerts`, `venues`, `artists` — в **ConcertService**;
* `orders`, `tickets`, `transactions` — в **OrderService** и **PaymentService**.

#### 3.2 Репликация и шардирование

* **Репликация:** Primary + 2 Standby узла для высокой доступности.
* **Read-replicas:** используются для масштабирования чтений.
* **Шардирование:** по `event_id` или `venue_id` при росте нагрузки.

---

### 4. Система кэширования

**Redis Cluster** выполняет функции:

1. **Session storage** — хранение сессий и токенов пользователей.
2. **Caching Layer** — кэширование горячих данных (афиши, статусы мест).
3. **Rate Limiting** — ограничение количества запросов.

**Примеры ключей и TTL:**

* `session:{user_id}` — TTL 30 мин;
* `event:{id}:info` — TTL 120 сек;
* `availability:{event_id}` — TTL 10 сек.

**Стратегии обновления:**

* *Cache-aside* — при промахе читаем из БД и кладём в кэш.
* *Pub/Sub инвалидация* — сервисы уведомляют Redis об изменении данных.

---

### 5. Интеграция CDN

**CDN** раздаёт:

* изображения афиш и QR-билетов;
* фронтенд-ассеты (JS, CSS, HTML).

**Стратегии кеширования:**

* `Cache-Control: public, max-age=31536000, immutable` — для статических файлов.
* `stale-while-revalidate` — для изображений, которые обновляются.

CDN снижает нагрузку на API и ускоряет доставку контента.

---

### 6. Взаимодействие компонентов

1. Клиент обращается к **CDN** за статикой.
2. Динамические запросы идут через **KONG**, маршрутизируются к нужным сервисам.
3. Каждый сервис работает со своей **PostgreSQL** БД.
4. **Redis** используется для кэша и сессий.
5. При изменении данных выполняется инвалидация кэша.

---

### 7. Устойчивость и производительность

* Микросервисы изолированы и могут масштабироваться независимо.
* Redis-кластер поддерживает failover (Sentinel или Cluster Mode).
* KONG обеспечивает балансировку, health-check и rate limiting.
* CDN повышает географическую доступность и снижает задержки.

---

### 8. Метрики и мониторинг

| Компонент    | Метрика         | Цель     |
| ------------ | --------------- | -------- |
| PostgreSQL   | Replication lag | ≤ 1 сек  |
| PostgreSQL   | P95 latency     | ≤ 100 мс |
| Redis        | Hit ratio       | ≥ 90%    |
| Redis        | P95 latency     | ≤ 2 мс   |
| CDN          | Edge hit ratio  | ≥ 85%    |
| API Gateway  | Ошибки 5xx      | < 0.1%   |
| App Services | P95 latency     | ≤ 300 мс |

**Инструменты:** Prometheus, Grafana, Loki, Jaeger (tracing), ELK.

---

### 9. Масштабирование

* Горизонтальное масштабирование микросервисов (через Kubernetes или Docker Swarm).
* Расширение Redis-кластера добавлением новых шардов.
* Добавление read-реплик для PostgreSQL.
* CDN масштабируется автоматически у провайдера.

---



## 10) Схемы данных

```sql
-- Пользователи
CREATE TABLE users (
  user_id       BIGSERIAL PRIMARY KEY,
  email         CITEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  full_name     TEXT,
  locale        TEXT DEFAULT 'ru-RU',
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Площадки и события
CREATE TABLE venues (
  venue_id   BIGSERIAL PRIMARY KEY,
  name       TEXT NOT NULL,
  city       TEXT,
  tz         TEXT NOT NULL,
  capacity   INT,
  created_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE events (
  event_id     BIGSERIAL PRIMARY KEY,
  venue_id     BIGINT NOT NULL REFERENCES venues(venue_id),
  artist_id    BIGINT,
  title        TEXT NOT NULL,
  starts_at    TIMESTAMPTZ NOT NULL,
  ends_at      TIMESTAMPTZ,
  status       TEXT NOT NULL CHECK (status IN ('draft','onsale','soldout','canceled')),
  created_at   TIMESTAMPTZ DEFAULT now(),
  updated_at   TIMESTAMPTZ DEFAULT now()
);

-- Схема зала и места
CREATE TABLE seats (
  seat_id    BIGSERIAL PRIMARY KEY,
  venue_id   BIGINT NOT NULL REFERENCES venues(venue_id),
  section    TEXT,
  row        TEXT,
  number     TEXT,
  UNIQUE(venue_id, section, row, number)
);

CREATE TABLE price_tiers (
  tier_id   BIGSERIAL PRIMARY KEY,
  event_id  BIGINT NOT NULL REFERENCES events(event_id),
  name      TEXT,
  price     NUMERIC(12,2) NOT NULL
);

-- Инвентарь мест по событию
CREATE TABLE event_seat_inventory (
  event_id  BIGINT NOT NULL REFERENCES events(event_id),
  seat_id   BIGINT NOT NULL REFERENCES seats(seat_id),
  tier_id   BIGINT NOT NULL REFERENCES price_tiers(tier_id),
  status    TEXT NOT NULL CHECK (status IN ('available','held','sold')),
  hold_id   UUID,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY(event_id, seat_id)
);

-- Заказ/оплата
CREATE TABLE orders (
  order_id     BIGSERIAL PRIMARY KEY,
  user_id      BIGINT NOT NULL REFERENCES users(user_id),
  event_id     BIGINT NOT NULL REFERENCES events(event_id),
  total_amount NUMERIC(12,2) NOT NULL,
  currency     CHAR(3) NOT NULL,
  status       TEXT NOT NULL CHECK (status IN ('pending','paid','failed','refunded')),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE order_items (
  order_item_id BIGSERIAL PRIMARY KEY,
  order_id      BIGINT NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
  seat_id       BIGINT NOT NULL,
  price         NUMERIC(12,2) NOT NULL
);

CREATE TABLE payments (
  payment_id BIGSERIAL PRIMARY KEY,
  order_id   BIGINT NOT NULL REFERENCES orders(order_id),
  provider   TEXT NOT NULL,
  ext_ref    TEXT,
  amount     NUMERIC(12,2) NOT NULL,
  status     TEXT NOT NULL CHECK (status IN ('initiated','authorized','captured','failed','refunded')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Идемпотентность для платёжных вебхуков
CREATE TABLE idempotency_keys (
  key        TEXT PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
```

Индексы: `events(starts_at, venue_id,status)`, `event_seat_inventory(event_id,status) INCLUDE (tier_id)`, `orders(user_id, created_at DESC)`, частичные индексы для `status`.

### 11. Вывод

Данная архитектура сочетает:

* **Надёжность транзакций** — PostgreSQL;
* **Высокую скорость ответов** — Redis и CDN;
* **Гибкость масштабирования** — микросервисная структура с Kong.

Система устойчива к высоким нагрузкам и обеспечивает быструю работу даже в пиковые периоды продаж.
